name: Build Windows EXE

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # 自动检测并安装项目依赖
        python -c "
        import sys
        sys.path.insert(0, '.')
        from py2exe_converter.core import PyToExeConverter
        converter = PyToExeConverter()
        deps_result = converter.check_and_install_dependencies('test_example.py')
        if not deps_result['success']:
            print(f'Warning: {deps_result.get(\"error\", \"Unknown error\")}')
        else:
            print('All dependencies installed successfully')
        "
    
    - name: Build EXE with PyInstaller
      run: |
        pyinstaller test_app.spec --clean --noconfirm
    
    - name: Test EXE
      run: |
        dist\test_app.exe
      timeout-minutes: 2
    
    - name: Upload Windows EXE
      uses: actions/upload-artifact@v4
      with:
        name: windows-exe-${{ github.sha }}
        path: |
          dist/test_app.exe
          dist/api_test_app.exe
        retention-days: 30
    
    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/test_app.exe
          dist/api_test_app.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # 自动检测并安装项目依赖
        python -c "
        import sys
        sys.path.insert(0, '.')
        from py2exe_converter.core import PyToExeConverter
        converter = PyToExeConverter()
        deps_result = converter.check_and_install_dependencies('test_example.py')
        if not deps_result['success']:
            print(f'Warning: {deps_result.get(\"error\", \"Unknown error\")}')
        else:
            print('All dependencies installed successfully')
        "
    
    - name: Build Linux binary
      run: |
        pyinstaller test_app.spec --clean --noconfirm
    
    - name: Test Linux binary
      run: |
        ./dist/test_app
      timeout-minutes: 2
    
    - name: Upload Linux binary
      uses: actions/upload-artifact@v4
      with:
        name: linux-binary-${{ github.sha }}
        path: |
          dist/test_app
          dist/api_test_app
        retention-days: 30